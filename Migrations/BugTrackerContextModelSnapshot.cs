// <auto-generated />
using System;
using BugTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BugTracker.Migrations
{
    [DbContext(typeof(BugTrackerContext))]
    partial class BugTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BugTracker.Models.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BugTracker.Models.CoreBug", b =>
                {
                    b.Property<Guid>("BugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffectedVersions")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("AssessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssessedImpactedVersions")
                        .HasColumnType("ntext");

                    b.Property<string>("AssessedProductType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BugDescription")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("BugTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoundInBuild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssessed")
                        .HasColumnType("bit");

                    b.Property<string>("JiraKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JiraLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BugId");

                    b.HasIndex("JiraKey")
                        .IsUnique();

                    b.ToTable("CoreBugs");
                });

            modelBuilder.Entity("BugTracker.Models.CustomTask", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InteractiveResponseTechnologyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JiraTaskKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JiraTaskLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StudyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("TrialManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaskId");

                    b.HasIndex("BugId");

                    b.HasIndex("InteractiveResponseTechnologyId");

                    b.HasIndex("StudyId");

                    b.HasIndex("TrialManagerId");

                    b.ToTable("CustomTasks", t =>
                        {
                            t.HasCheckConstraint("CK_Task_Product", "(TrialManagerId IS NOT NULL AND InteractiveResponseTechnologyId IS NULL) OR (TrialManagerId IS NULL AND InteractiveResponseTechnologyId IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("BugTracker.Models.ExternalModule", b =>
                {
                    b.Property<Guid>("ExternalModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalModuleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InteractiveResponseTechnologyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ExternalModuleId");

                    b.HasIndex("InteractiveResponseTechnologyId");

                    b.ToTable("ExternalModules");
                });

            modelBuilder.Entity("BugTracker.Models.InteractiveResponseTechnology", b =>
                {
                    b.Property<Guid>("InteractiveResponseTechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JiraKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JiraLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrialManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WebLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InteractiveResponseTechnologyId");

                    b.HasIndex("StudyId");

                    b.HasIndex("TrialManagerId");

                    b.ToTable("InteractiveResponseTechnologies");
                });

            modelBuilder.Entity("BugTracker.Models.Study", b =>
                {
                    b.Property<Guid>("StudyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TrialManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TrialManagerId");

                    b.ToTable("Studies");
                });

            modelBuilder.Entity("BugTracker.Models.TaskNote", b =>
                {
                    b.Property<Guid>("TaskNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskNoteId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskNotes");
                });

            modelBuilder.Entity("BugTracker.Models.TaskStep", b =>
                {
                    b.Property<Guid>("TaskStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("AutoCheckResult")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionAnswer")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<bool>("IsAutoCheck")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDecision")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTerminal")
                        .HasColumnType("bit");

                    b.Property<Guid?>("NextStepIfFalse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NextStepIfNo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NextStepIfTrue")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NextStepIfYes")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresNote")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaskStepId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskSteps");
                });

            modelBuilder.Entity("BugTracker.Models.TrialManager", b =>
                {
                    b.Property<Guid>("TrialManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JiraKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JiraLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WebLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrialManagerId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("TrialManagers");
                });

            modelBuilder.Entity("BugTracker.Models.WeeklyCoreBugEntry", b =>
                {
                    b.Property<Guid>("WeeklyCoreBugEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeeklyCoreBugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WeeklyCoreBugEntryId");

                    b.HasIndex("BugId");

                    b.HasIndex("WeeklyCoreBugsId", "BugId")
                        .IsUnique();

                    b.ToTable("WeeklyCoreBugEntries");
                });

            modelBuilder.Entity("BugTracker.Models.WeeklyCoreBugs", b =>
                {
                    b.Property<Guid>("WeeklyCoreBugsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WeekEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WeeklyCoreBugsId");

                    b.ToTable("WeeklyCoreBugs");
                });

            modelBuilder.Entity("BugTracker.Models.Workflow.WorkflowDefinition", b =>
                {
                    b.Property<Guid>("WorkflowDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DefinitionJson")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WorkflowDefinitionId");

                    b.HasIndex("Name", "Version")
                        .IsUnique();

                    b.ToTable("WorkflowDefinitions");
                });

            modelBuilder.Entity("BugTracker.Models.Workflow.WorkflowExecution", b =>
                {
                    b.Property<Guid>("WorkflowExecutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContextJson")
                        .HasColumnType("ntext");

                    b.Property<string>("CurrentStepId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkflowDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorkflowExecutionId");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.HasIndex("WorkflowDefinitionId");

                    b.ToTable("WorkflowExecutions");
                });

            modelBuilder.Entity("BugTracker.Models.Workflow.WorkflowAuditLog", b =>
                {
                    b.Property<Guid>("WorkflowAuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConditionsEvaluated")
                        .HasColumnType("ntext");

                    b.Property<string>("ContextSnapshot")
                        .HasColumnType("ntext");

                    b.Property<string>("Decision")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NextStepId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PreviousStepId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StepId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkflowExecutionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorkflowAuditLogId");

                    b.HasIndex("WorkflowExecutionId", "Timestamp");

                    b.ToTable("WorkflowAuditLogs");
                });

            modelBuilder.Entity("BugTracker.Models.CustomTask", b =>
                {
                    b.HasOne("BugTracker.Models.CoreBug", "CoreBug")
                        .WithMany("Tasks")
                        .HasForeignKey("BugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Models.InteractiveResponseTechnology", "InteractiveResponseTechnology")
                        .WithMany("Tasks")
                        .HasForeignKey("InteractiveResponseTechnologyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BugTracker.Models.Study", "Study")
                        .WithMany("Tasks")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BugTracker.Models.TrialManager", "TrialManager")
                        .WithMany("Tasks")
                        .HasForeignKey("TrialManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CoreBug");

                    b.Navigation("InteractiveResponseTechnology");

                    b.Navigation("Study");

                    b.Navigation("TrialManager");
                });

            modelBuilder.Entity("BugTracker.Models.ExternalModule", b =>
                {
                    b.HasOne("BugTracker.Models.InteractiveResponseTechnology", "InteractiveResponseTechnology")
                        .WithMany("ExternalModules")
                        .HasForeignKey("InteractiveResponseTechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteractiveResponseTechnology");
                });

            modelBuilder.Entity("BugTracker.Models.InteractiveResponseTechnology", b =>
                {
                    b.HasOne("BugTracker.Models.Study", "Study")
                        .WithMany("InteractiveResponseTechnologies")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Models.TrialManager", "TrialManager")
                        .WithMany()
                        .HasForeignKey("TrialManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Study");

                    b.Navigation("TrialManager");
                });

            modelBuilder.Entity("BugTracker.Models.Study", b =>
                {
                    b.HasOne("BugTracker.Models.Client", "Client")
                        .WithMany("Studies")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugTracker.Models.TrialManager", "TrialManager")
                        .WithMany("Studies")
                        .HasForeignKey("TrialManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("TrialManager");
                });

            modelBuilder.Entity("BugTracker.Models.TaskNote", b =>
                {
                    b.HasOne("BugTracker.Models.CustomTask", "Task")
                        .WithMany("TaskNotes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("BugTracker.Models.TaskStep", b =>
                {
                    b.HasOne("BugTracker.Models.CustomTask", "Task")
                        .WithMany("TaskSteps")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("BugTracker.Models.TrialManager", b =>
                {
                    b.HasOne("BugTracker.Models.Client", "Client")
                        .WithOne("TrialManager")
                        .HasForeignKey("BugTracker.Models.TrialManager", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BugTracker.Models.WeeklyCoreBugEntry", b =>
                {
                    b.HasOne("BugTracker.Models.CoreBug", "CoreBug")
                        .WithMany("WeeklyCoreBugEntries")
                        .HasForeignKey("BugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Models.WeeklyCoreBugs", "WeeklyCoreBugs")
                        .WithMany("WeeklyCoreBugEntries")
                        .HasForeignKey("WeeklyCoreBugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoreBug");

                    b.Navigation("WeeklyCoreBugs");
                });

            modelBuilder.Entity("BugTracker.Models.Client", b =>
                {
                    b.Navigation("Studies");

                    b.Navigation("TrialManager")
                        .IsRequired();
                });

            modelBuilder.Entity("BugTracker.Models.CoreBug", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("WeeklyCoreBugEntries");
                });

            modelBuilder.Entity("BugTracker.Models.CustomTask", b =>
                {
                    b.Navigation("TaskNotes");

                    b.Navigation("TaskSteps");
                });

            modelBuilder.Entity("BugTracker.Models.InteractiveResponseTechnology", b =>
                {
                    b.Navigation("ExternalModules");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BugTracker.Models.Study", b =>
                {
                    b.Navigation("InteractiveResponseTechnologies");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BugTracker.Models.TrialManager", b =>
                {
                    b.Navigation("Studies");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BugTracker.Models.WeeklyCoreBugs", b =>
                {
                    b.Navigation("WeeklyCoreBugEntries");
                });

            modelBuilder.Entity("BugTracker.Models.Workflow.WorkflowExecution", b =>
                {
                    b.HasOne("BugTracker.Models.CustomTask", "Task")
                        .WithOne()
                        .HasForeignKey("BugTracker.Models.Workflow.WorkflowExecution", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Models.Workflow.WorkflowDefinition", "WorkflowDefinition")
                        .WithMany()
                        .HasForeignKey("WorkflowDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("WorkflowDefinition");
                });

            modelBuilder.Entity("BugTracker.Models.Workflow.WorkflowAuditLog", b =>
                {
                    b.HasOne("BugTracker.Models.Workflow.WorkflowExecution", "WorkflowExecution")
                        .WithMany("AuditLogs")
                        .HasForeignKey("WorkflowExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowExecution");
                });

            modelBuilder.Entity("BugTracker.Models.Workflow.WorkflowExecution", b =>
                {
                    b.Navigation("AuditLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
